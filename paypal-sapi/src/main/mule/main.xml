<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  MuleSoft Training - Anypoint Platform Development: Level 2
  %%
  Copyright (C) 2019 - 2021 MuleSoft, Inc. All rights reserved. http://www.mulesoft.com
  %%
  The software in this package is published under the terms of the
  Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License,
  a copy of which has been included with this distribution in the LICENSE.txt file.
  #L%
  -->
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:api-gateway="http://www.mulesoft.org/schema/mule/api-gateway" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:secure-properties="http://www.mulesoft.org/schema/mule/secure-properties" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd  http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd  http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd   http://www.mulesoft.org/schema/mule/secure-properties http://www.mulesoft.org/schema/mule/secure-properties/current/mule-secure-properties.xsd  http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd  http://www.mulesoft.org/schema/mule/api-gateway http://www.mulesoft.org/schema/mule/api-gateway/current/mule-api-gateway.xsd  ">
  <flow name="create-payment">
    <logger level="INFO" message="Creating payment" doc:name="START"/>
    <ee:transform doc:name="To PayPal create payment API request body">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/json
          var invoiceNo = (10000000000 + randomInt(90000000000)) as String // random invoice number
          ---
          {
            intent: "sale",
            payer: {
              payment_method: "paypal"
            },
            transactions: [
              {
                amount: {
                  total: payload.amount as String,
                  currency: "USD"
                },
                description: payload.description,
                custom: "ANYAIRLINE_90048630024435",
                invoice_number: invoiceNo,
                payment_options: {
                  allowed_payment_method: "INSTANT_FUNDING_SOURCE"
                },
                soft_descriptor: "ANYAIRLINE BAGGAGE"
              }
            ],
            note_to_payer: "Contact us for any questions on your order."
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Before invoking PayPal create payment" doc:name="Before API call"/>
    <try>
      <flow-ref name="paypal-create-payment" doc:name="paypal-create-payment"/>
      <error-handler>
        <on-error-continue>
          <raise-error type="APP:CANT_CREATE_PAYMENT" description="Cannot create payment at the moment" doc:name="CANT_CREATE_PAYMENT"/>
        </on-error-continue>
      </error-handler>
    </try>
    <logger level="INFO" message="After invoking PayPal create payment" doc:name="AFTER REQUEST"/>
    <set-payload value="#[output application/java --- payload.id]" doc:name="Payment ID"/>
    <logger level="INFO" message="Created payment" doc:name="END"/>
  </flow>
  <sub-flow name="paypal-create-payment">
    <http:request url="${paypal.paymentUrl}" method="POST" config-ref="paypalServerHttpRequestConfig" doc:name="PayPal: create payment"/>
  </sub-flow>
  <flow name="approve-payment">
    <logger level="INFO" message="Registering payment approval" doc:name="START"/>
    <ee:transform doc:name="To PayPal execute payment API request body">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
          output application/json
          ---
          { 
              payer_id: payload.payerID 
          }]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" message="Before invoking PayPal execute payment" doc:name="Before API call"/>
    <try>
      <flow-ref name="paypal-execute-payment" doc:name="paypal-execute-payment"/>
      <error-handler>
        <on-error-continue>
          <raise-error type="APP:CANT_EXECUTE_PAYMENT" description="Cannot execute payment at the moment" doc:name="CANT_EXECUTE_PAYMENT"/>
        </on-error-continue>
      </error-handler>
    </try>
    <logger level="INFO" message="After invoking PayPal execute payment" doc:name="After API call"/>
    <set-payload value="#[output application/java --- lower(payload.state) == 'approved']" doc:name="Payment execution approved"/>
    <logger level="INFO" message="Registered payment approval" doc:name="END"/>
  </flow>
  <sub-flow name="paypal-execute-payment">
    <http:request url="${paypal.executeUrl}" method="POST" config-ref="paypalServerHttpRequestConfig" doc:name="PayPal: execute payment">
      <http:uri-params><![CDATA[#[output application/java --- {paymentID : vars.paymentID}]]]></http:uri-params>
    </http:request>
  </sub-flow>
</mule>
